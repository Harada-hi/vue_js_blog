{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport TechSearch from \"../components/TechSearch.vue\";\nimport Paginate from \"vuejs-paginate-next\";\nimport Meta from '../components/meta.vue';\nimport { articles } from '@/utiles/articles';\nexport default {\n  name: \"techList\",\n  components: {\n    TechSearch,\n    Paginate,\n    Meta\n  },\n  inject: [\"tech\"],\n  data() {\n    return {\n      pageCount: 1,\n      //表示しているものを格納している配列\n      showlists: [],\n      //絞り込み条件に応じた物が全て格納されている配列\n      baselists: [],\n      //postGet関数を用いて取得した記事が全て格納されている配列\n      lists: [],\n      pageRange: 4,\n      //ページネーションのボタンの番号なのでもっといい名前にする\n      pagenateNumber: 1,\n      loading: true\n    };\n  },\n  methods: {\n    //ヘッダー上のボタンを選択の有無に応じて色を変更する関数\n    buttonChange() {\n      const radio = document.querySelector('.fa-wrench');\n      const blog = document.querySelector('.fa-newspaper');\n      if (radio.classList.contains('no-select')) {\n        radio.classList.remove('no-select');\n        blog.classList.add('no-select');\n      } else {\n        if (blog.classList.contains('no-select') === false) blog.classList.add('no-select');\n      }\n    },\n    clickCallback(pageNumber) {\n      this.pagenateNumber = pageNumber;\n      this.showlists = this.baselists.slice(this.pageRange * (pageNumber - 1), this.pageRange * pageNumber);\n    },\n    //カテゴリで絞り込みした際に起動する関数\n    categorySearch(e) {\n      if (e === \"\") {\n        //絞り込みの際、選択したものがなかった場合全カテゴリ表示の1ページ目に戻るようにする\n        this.baselists = this.lists;\n        this.pageCount = Math.ceil(this.baselists.length / this.pageRange);\n        this.showlists = this.baselists.slice(0, 4);\n        this.pagenateNumber = 1;\n      } else {\n        this.baselists = [];\n        for (let i = 0; i < this.lists.length; i++) {\n          if (e === this.lists[i].tag) {\n            this.baselists.push(this.lists[i]);\n          }\n        }\n        this.pageCount = Math.ceil(this.baselists.length / this.pageRange);\n        this.showlists = this.baselists.slice(0, 4);\n        this.pagenateNumber = 1;\n      }\n    },\n    //postGetとかに変えた方がいい\n    postGet() {\n      let ths = this;\n      const techArray = [];\n      const blogArray = [];\n      for (let i = 0; i < articles.length; i++) {\n        if (articles[i].category === \"技術系\") {\n          ths.techArray.push({\n            category: articles[i].category,\n            title: articles[i].title,\n            date: articles[i].date,\n            tag: articles[i].tag,\n            link: '/post' + articles[i].id\n          });\n        } else if (articles[i].category === \"ブログ\") {\n          ths.blogArray.push({\n            category: articles[i].category,\n            title: articles[i].title,\n            date: articles[i].date,\n            tag: articles[i].tag,\n            link: '/post' + articles[i].id\n          });\n        } else {\n          console.log(\"skip\");\n        }\n      }\n      ths.$emit('postTo', techArray, blogArray);\n      ths.lists = blogArray;\n      ths.listin();\n    },\n    //injectもしくはpostGetで取得したものを実際に表示する用の配列に格納していく\n    listin() {\n      this.baselists = this.lists;\n      this.showlists = this.baselists.slice(0, this.pageRange);\n      this.pageCount = Math.ceil(this.baselists.length / this.pageRange);\n    }\n  },\n  created() {\n    this.loading = true;\n  },\n  mounted() {\n    //injectされた値の有無に応じて処理を分ける。\n    if (this.tech.length === 0) {\n      this.postGet();\n    } else {\n      this.lists = this.tech;\n      this.listin();\n    }\n    this.buttonChange();\n  },\n  updated() {\n    this.loading = false;\n  }\n};","map":{"version":3,"names":["TechSearch","Paginate","Meta","articles","name","components","inject","data","pageCount","showlists","baselists","lists","pageRange","pagenateNumber","loading","methods","buttonChange","radio","document","querySelector","blog","classList","contains","remove","add","clickCallback","pageNumber","slice","categorySearch","e","Math","ceil","length","i","tag","push","postGet","ths","techArray","blogArray","category","title","date","link","id","console","log","$emit","listin","created","mounted","tech","updated"],"sources":["C:\\Users\\uhouh\\Documents\\転職用にまとめるための\\pink-hunger\\blog_vue_test\\src\\views\\TechList.vue"],"sourcesContent":["<template>\r\n  <Meta></Meta>\r\n  <div v-show=\"loading\" class=\"loader\">\r\n    <div class=\"loader_inner\">\r\n      <p>読み込み中</p>\r\n    </div>\r\n  </div>\r\n  <div v-show=\"!loading\" class=\"out\">\r\n    <tech-search v-on:category-search=\"categorySearch\"></tech-search>\r\n    <div class=\"article_list\">\r\n      <div\r\n        class=\"article_cards\"\r\n        v-for=\"item in showlists\"\r\n        v-bind:key=\"item.link\"\r\n      >\r\n        \r\n        <div class=\"article_txt\">\r\n          <div class=\"cat_day\">\r\n            <div class=\"category\">{{ item.tag }}</div>\r\n            <div class=\"day\">{{ item.date }}</div>\r\n          </div>\r\n          <div class=\"title\">\r\n            <router-link v-bind:to=\"item.link\">\r\n              <h1>{{ item.title }}</h1>\r\n            </router-link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <paginate\r\n      :page-count=\"pageCount\"\r\n      :click-handler=\"clickCallback\"\r\n      :page-range=\"pageRange\"\r\n      :prev-text=\"'<'\"\r\n      :next-text=\"'>'\"\r\n      :force-page=\"pagenateNumber\"\r\n    ></paginate>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TechSearch from \"../components/TechSearch.vue\";\r\nimport Paginate from \"vuejs-paginate-next\";\r\nimport Meta from '../components/meta.vue'\r\nimport { articles } from '@/utiles/articles'\r\n\r\n\r\nexport default {\r\n  name: \"techList\",\r\n  components: { TechSearch, Paginate,Meta },\r\n  inject: [\"tech\"],\r\n  data() {\r\n    return {\r\n      pageCount: 1,\r\n      //表示しているものを格納している配列\r\n      showlists: [],\r\n      //絞り込み条件に応じた物が全て格納されている配列\r\n      baselists: [],\r\n      //postGet関数を用いて取得した記事が全て格納されている配列\r\n      lists: [],\r\n      pageRange: 4,\r\n      //ページネーションのボタンの番号なのでもっといい名前にする\r\n      pagenateNumber: 1,\r\n      loading:true\r\n    };\r\n  },\r\n  methods: {\r\n    //ヘッダー上のボタンを選択の有無に応じて色を変更する関数\r\n    buttonChange(){\r\n      const radio = document.querySelector('.fa-wrench')\r\n      const blog = document.querySelector('.fa-newspaper')\r\n      if (radio.classList.contains('no-select')) {\r\n        radio.classList.remove('no-select')\r\n        blog.classList.add('no-select')\r\n      } else {\r\n        if(blog.classList.contains('no-select') === false)\r\n        blog.classList.add('no-select')\r\n      }\r\n    },\r\n    clickCallback(pageNumber) {\r\n      this.pagenateNumber = pageNumber;\r\n      this.showlists = this.baselists.slice(\r\n        this.pageRange * (pageNumber - 1),\r\n        this.pageRange * pageNumber\r\n      );\r\n    },\r\n    //カテゴリで絞り込みした際に起動する関数\r\n    categorySearch(e) {\r\n      if (e === \"\") {\r\n        //絞り込みの際、選択したものがなかった場合全カテゴリ表示の1ページ目に戻るようにする\r\n        this.baselists = this.lists;\r\n        this.pageCount = Math.ceil(this.baselists.length / this.pageRange);\r\n        this.showlists = this.baselists.slice(0, 4);\r\n        this.pagenateNumber = 1;\r\n      } else {\r\n        this.baselists = [];\r\n        for (let i = 0; i < this.lists.length; i++) {\r\n          if (e === this.lists[i].tag) {\r\n            this.baselists.push(this.lists[i]);\r\n          }\r\n        }\r\n        this.pageCount = Math.ceil(this.baselists.length / this.pageRange);\r\n        this.showlists = this.baselists.slice(0, 4);\r\n        this.pagenateNumber = 1;\r\n      }\r\n    \r\n    },\r\n    //postGetとかに変えた方がいい\r\n    postGet(){\r\n      let ths = this;\r\n      const techArray = []\r\n      const blogArray = []\r\n\r\n      for(let i = 0; i < articles.length; i++) {\r\n          if(articles[i].category === \"技術系\"){\r\n            \r\n            ths.techArray.push(\r\n              { \r\n                \r\n                category: articles[i].category,\r\n                title: articles[i].title,\r\n                date: articles[i].date,\r\n                tag:  articles[i].tag,\r\n                link : '/post' + articles[i].id\r\n              }\r\n              \r\n            )\r\n            \r\n  \r\n  \r\n        } else if(articles[i].category === \"ブログ\"){\r\n\r\n          ths.blogArray.push(\r\n            { \r\n              \r\n              category: articles[i].category,\r\n                title: articles[i].title,\r\n                date: articles[i].date,\r\n                tag:  articles[i].tag,\r\n                link : '/post' + articles[i].id\r\n            }\r\n            \r\n          )\r\n          \r\n  \r\n  \r\n      } else {\r\n            console.log(\"skip\")\r\n          }\r\n        }\r\n      ths.$emit('postTo',techArray,blogArray)\r\n      ths.lists = blogArray\r\n \r\n      ths.listin()\r\n    \r\n    },\r\n    //injectもしくはpostGetで取得したものを実際に表示する用の配列に格納していく\r\n    listin(){\r\n           this.baselists = this.lists\r\n           this.showlists = this.baselists.slice(0,this.pageRange)\r\n           this.pageCount = Math.ceil(this.baselists.length/this.pageRange);\r\n    }\r\n  },\r\n  created(){\r\n    this.loading=true\r\n  },\r\nmounted() {\r\n  //injectされた値の有無に応じて処理を分ける。\r\n  if(this.tech.length===0){\r\n    this.postGet()\r\n    \r\n  } else {\r\n    this.lists = this.tech\r\n    this.listin();\r\n  }\r\n  \r\n  \r\n  this.buttonChange();\r\n    }\r\n    ,updated(){\r\n      this.loading = false;\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.loader {\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.out {\r\n  padding: 50px 0;\r\n  min-height: calc(100vh);\r\n  background: #ebf0f0;\r\n}\r\n\r\n.article_list {\r\n  display: grid;\r\n  grid-template-columns: 1fr; /* 子要素を縦並び */\r\n  gap: 0; /* 隙間なし */\r\n  max-width: 800px;\r\n  margin: 0 auto; /* 中央寄せ */\r\n}\r\n\r\n.article_cards {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 16px;\r\n  position: relative;\r\n}\r\n\r\n.article_cards::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  border-bottom: 2px dashed #ccc; /* 破線の区切り */\r\n}\r\n\r\n\r\n.article_txt {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  /* 上揃え */\r\n  padding-left: 16px;\r\n}\r\n\r\n.cat_day {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  font-size: 12px;\r\n}\r\n\r\n.category {\r\n  background: black;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  padding: 4px 8px;\r\n  width: 60px; /* 横幅固定 */\r\n  text-align: center; /* 文字中央揃え */\r\n  border-radius: 5%;\r\n}\r\n\r\n.day {\r\n  color: #888;\r\n  font-weight: bold;\r\n}\r\n\r\n.title {\r\n  margin-top: 8px;\r\n}\r\n\r\n.title h1 {\r\n  font-size: 14px;\r\n  margin: 0;\r\n}\r\n\r\n\r\n/* タブレットのレスポンシブ対応 */\r\n@media (min-width: 768px) {\r\n  .article_list {\r\n    max-width: 900px;\r\n    grid-template-columns: repeat(3, 1fr); /* 横に3列 */\r\n  }\r\n\r\n\r\n  .article_txt {\r\n    padding-left: 0;\r\n  }\r\n\r\n  .article_cards {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .cat_day {\r\n    margin-top: 10px;\r\n  }\r\n\r\n  .title h1 {\r\n    font-size: 18px;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n/* PCのレスポンシブ対応 */\r\n@media (min-width: 1024px) {\r\n  .article_list {\r\n    max-width: 1200px;\r\n    grid-template-columns: repeat(4, 1fr); /* 横に4列 */\r\n  }\r\n}\r\n\r\n.pagination {\r\n  display: flex;\r\n  justify-content: center; /* 中央に配置 */\r\n  align-items: center;\r\n  margin: 20px 0;\r\n  padding: 0;\r\n}\r\n\r\n.pagination button,\r\n.pagination a {\r\n  border: 2px solid #313131;\r\n  background-color: white;\r\n  padding: 8px 16px;\r\n  margin: 0 5px;\r\n  font-size: 14px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  transition: background-color 0.3s, color 0.3s;\r\n  width: 40px;\r\n}\r\n\r\n.pagination .active a {\r\n  background-color: rgba(205, 205, 205, 0.2);\r\n  border: 2px solid #3131311b;\r\n  color: rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.pagination .disabled {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n  border-color: #ddd;\r\n}\r\n\r\n.pagination .prev,\r\n.pagination .next {\r\n  font-weight: bold;\r\n}\r\n\r\n.pagination .prev:hover,\r\n.pagination .next:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n}\r\n</style>"],"mappings":";AAyCA,OAAOA,UAAS,MAAO,8BAA8B;AACrD,OAAOC,QAAO,MAAO,qBAAqB;AAC1C,OAAOC,IAAG,MAAO,wBAAuB;AACxC,SAASC,QAAO,QAAS,mBAAkB;AAG3C,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,UAAU,EAAE;IAAEL,UAAU;IAAEC,QAAQ;IAACC;EAAK,CAAC;EACzCI,MAAM,EAAE,CAAC,MAAM,CAAC;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,SAAS,EAAE,CAAC;MACZ;MACAC,SAAS,EAAE,EAAE;MACb;MACAC,SAAS,EAAE,EAAE;MACb;MACAC,KAAK,EAAE,EAAE;MACTC,SAAS,EAAE,CAAC;MACZ;MACAC,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAC;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,YAAYA,CAAA,EAAE;MACZ,MAAMC,KAAI,GAAIC,QAAQ,CAACC,aAAa,CAAC,YAAY;MACjD,MAAMC,IAAG,GAAIF,QAAQ,CAACC,aAAa,CAAC,eAAe;MACnD,IAAIF,KAAK,CAACI,SAAS,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;QACzCL,KAAK,CAACI,SAAS,CAACE,MAAM,CAAC,WAAW;QAClCH,IAAI,CAACC,SAAS,CAACG,GAAG,CAAC,WAAW;MAChC,OAAO;QACL,IAAGJ,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,WAAW,MAAM,KAAK,EACjDF,IAAI,CAACC,SAAS,CAACG,GAAG,CAAC,WAAW;MAChC;IACF,CAAC;IACDC,aAAaA,CAACC,UAAU,EAAE;MACxB,IAAI,CAACb,cAAa,GAAIa,UAAU;MAChC,IAAI,CAACjB,SAAQ,GAAI,IAAI,CAACC,SAAS,CAACiB,KAAK,CACnC,IAAI,CAACf,SAAQ,IAAKc,UAAS,GAAI,CAAC,CAAC,EACjC,IAAI,CAACd,SAAQ,GAAIc,UACnB,CAAC;IACH,CAAC;IACD;IACAE,cAAcA,CAACC,CAAC,EAAE;MAChB,IAAIA,CAAA,KAAM,EAAE,EAAE;QACZ;QACA,IAAI,CAACnB,SAAQ,GAAI,IAAI,CAACC,KAAK;QAC3B,IAAI,CAACH,SAAQ,GAAIsB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACrB,SAAS,CAACsB,MAAK,GAAI,IAAI,CAACpB,SAAS,CAAC;QAClE,IAAI,CAACH,SAAQ,GAAI,IAAI,CAACC,SAAS,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI,CAACd,cAAa,GAAI,CAAC;MACzB,OAAO;QACL,IAAI,CAACH,SAAQ,GAAI,EAAE;QACnB,KAAK,IAAIuB,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI,IAAI,CAACtB,KAAK,CAACqB,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC1C,IAAIJ,CAAA,KAAM,IAAI,CAAClB,KAAK,CAACsB,CAAC,CAAC,CAACC,GAAG,EAAE;YAC3B,IAAI,CAACxB,SAAS,CAACyB,IAAI,CAAC,IAAI,CAACxB,KAAK,CAACsB,CAAC,CAAC,CAAC;UACpC;QACF;QACA,IAAI,CAACzB,SAAQ,GAAIsB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACrB,SAAS,CAACsB,MAAK,GAAI,IAAI,CAACpB,SAAS,CAAC;QAClE,IAAI,CAACH,SAAQ,GAAI,IAAI,CAACC,SAAS,CAACiB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI,CAACd,cAAa,GAAI,CAAC;MACzB;IAEF,CAAC;IACD;IACAuB,OAAOA,CAAA,EAAE;MACP,IAAIC,GAAE,GAAI,IAAI;MACd,MAAMC,SAAQ,GAAI,EAAC;MACnB,MAAMC,SAAQ,GAAI,EAAC;MAEnB,KAAI,IAAIN,CAAA,GAAI,CAAC,EAAEA,CAAA,GAAI9B,QAAQ,CAAC6B,MAAM,EAAEC,CAAC,EAAE,EAAE;QACrC,IAAG9B,QAAQ,CAAC8B,CAAC,CAAC,CAACO,QAAO,KAAM,KAAK,EAAC;UAEhCH,GAAG,CAACC,SAAS,CAACH,IAAI,CAChB;YAEEK,QAAQ,EAAErC,QAAQ,CAAC8B,CAAC,CAAC,CAACO,QAAQ;YAC9BC,KAAK,EAAEtC,QAAQ,CAAC8B,CAAC,CAAC,CAACQ,KAAK;YACxBC,IAAI,EAAEvC,QAAQ,CAAC8B,CAAC,CAAC,CAACS,IAAI;YACtBR,GAAG,EAAG/B,QAAQ,CAAC8B,CAAC,CAAC,CAACC,GAAG;YACrBS,IAAG,EAAI,OAAM,GAAIxC,QAAQ,CAAC8B,CAAC,CAAC,CAACW;UAC/B,CAEF;QAIJ,OAAO,IAAGzC,QAAQ,CAAC8B,CAAC,CAAC,CAACO,QAAO,KAAM,KAAK,EAAC;UAEvCH,GAAG,CAACE,SAAS,CAACJ,IAAI,CAChB;YAEEK,QAAQ,EAAErC,QAAQ,CAAC8B,CAAC,CAAC,CAACO,QAAQ;YAC5BC,KAAK,EAAEtC,QAAQ,CAAC8B,CAAC,CAAC,CAACQ,KAAK;YACxBC,IAAI,EAAEvC,QAAQ,CAAC8B,CAAC,CAAC,CAACS,IAAI;YACtBR,GAAG,EAAG/B,QAAQ,CAAC8B,CAAC,CAAC,CAACC,GAAG;YACrBS,IAAG,EAAI,OAAM,GAAIxC,QAAQ,CAAC8B,CAAC,CAAC,CAACW;UACjC,CAEF;QAIJ,OAAO;UACDC,OAAO,CAACC,GAAG,CAAC,MAAM;QACpB;MACF;MACFT,GAAG,CAACU,KAAK,CAAC,QAAQ,EAACT,SAAS,EAACC,SAAS;MACtCF,GAAG,CAAC1B,KAAI,GAAI4B,SAAQ;MAEpBF,GAAG,CAACW,MAAM,CAAC;IAEb,CAAC;IACD;IACAA,MAAMA,CAAA,EAAE;MACD,IAAI,CAACtC,SAAQ,GAAI,IAAI,CAACC,KAAI;MAC1B,IAAI,CAACF,SAAQ,GAAI,IAAI,CAACC,SAAS,CAACiB,KAAK,CAAC,CAAC,EAAC,IAAI,CAACf,SAAS;MACtD,IAAI,CAACJ,SAAQ,GAAIsB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACrB,SAAS,CAACsB,MAAM,GAAC,IAAI,CAACpB,SAAS,CAAC;IACvE;EACF,CAAC;EACDqC,OAAOA,CAAA,EAAE;IACP,IAAI,CAACnC,OAAO,GAAC,IAAG;EAClB,CAAC;EACHoC,OAAOA,CAAA,EAAG;IACR;IACA,IAAG,IAAI,CAACC,IAAI,CAACnB,MAAM,KAAG,CAAC,EAAC;MACtB,IAAI,CAACI,OAAO,CAAC;IAEf,OAAO;MACL,IAAI,CAACzB,KAAI,GAAI,IAAI,CAACwC,IAAG;MACrB,IAAI,CAACH,MAAM,CAAC,CAAC;IACf;IAGA,IAAI,CAAChC,YAAY,CAAC,CAAC;EACjB;EACCoC,OAAOA,CAAA,EAAE;IACR,IAAI,CAACtC,OAAM,GAAI,KAAK;EACtB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}